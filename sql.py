from helpers import (
  dict2,
)

'''
For Session Configuration:
REP_SESS_CONFIG_PARM

For SQL Override, Pre-SQL, Post-SQL:
REP_WIDGET_ATTR  (use WIDGET_ID, from REP_SESS_PARTITION_DEF)

For each connector (from instance to instance):
REP_MAPPING_CONN_PORTS
REP_MAPPING_UNCONN_PORTS

For Connection variable value:
REP_TASK_ATTR

For File names
OPB_SESS_FILE_VALS

For Connection Name/Username/String:
dict(
  table='INF_RP.OPB_CNX',
  pk=('OBJECT_NAME'),
  fields=[
    'OBJECT_ID',
    'OBJECT_NAME',
    'USER_NAME',
    'CONNECT_STRING',
  ]
)

For Sources:
dict(
  table='INF_RP.OPB_SRC',
  pk=('SRC_ID'),
  fields=[
    'SRC_ID',
    'SOURCE_NAME',
    'FILE_NAME',
    'OWNERNAME',
  ]
)

'''
sql_template = dict(
  log_session_run=None,  # get log of folder-workflow-session ran ordered by most recent
  log_workflow_run=None,  # get log of folder-workflow ran ordered by most recent
  list_source=None,  # get list of unique sources
  list_target=None,  # get list of unique targets
  list_transformation=None,  # get list of unique transformations
  list_instance=None,  # get list of unique instances in each mapping
  list_mapping=None,  # get list of unique mappings
  list_mapplet=None,  # get list of unique mapplets
  list_workflow=None,  # get list of unique workflows
  list_workflow_sessions=None,  # get list of unique workflows-sessions
  list_session=None,  # get list of unique sessions
  list_session_conns=None,  # get list of session connections
  list_source_fields=None, # get list of fields for a source
  list_target_fields=None, # get list of fields for a target
  list_folder=None, # get list of folders
  list_connections=None, # get list of connections
  list_workflow_details=None, # get list of workflow_details
)

sql_oracle = dict2(

list_connections=dict(
  table='INF_RP.OPB_CNX',
  pk=('OBJECT_NAME'),
  fields=[
    'OBJECT_ID',
    'OBJECT_NAME',
    'USER_NAME',
    'CONNECT_STRING',
  ]
),

log_session_run_full = (
  dict(
    folder='FOLDER_NAME',
    workflow='WORKFLOW_NAME',
    mapping='MAPPING_NAME',
    workflow_run_id='WORKFLOW_RUN_ID',
    task_id='TASK_ID',
    session='INSTANCE_NAME',
    start='START_TIME',
    end='END_TIME',
    duration='DURATION_MIN',
    error='RUN_ERR_MSG',
    src_success_rows='SRC_SUCCESS_ROWS',
    src_failed_rows='SRC_FAILED_ROWS',
    targ_success_rows='TARG_SUCCESS_ROWS',
    targ_failed_rows='TARG_FAILED_ROWS',
    total_trans_errs='TOTAL_TRANS_ERRS',
  ),
'''
SELECT * FROM (
  SELECT
    O.WORKFLOW_RUN_ID,
    F.SUBJ_NAME as FOLDER_NAME,
    W.WORKFLOW_NAME,
    O.INSTANCE_NAME,
    M.MAPPING_NAME,
    O.TASK_ID,
    O.START_TIME,
    O.END_TIME,
    CASE
    WHEN O.END_TIME-O.START_TIME < 0 THEN ROUND((SYSDATE-7/24-O.START_TIME)*24*60,1)
    ELSE ROUND((O.END_TIME-O.START_TIME)*24*60,1)
    END as DURATION_MIN,
    O.RUN_ERR_CODE,
    O.RUN_ERR_MSG,
    L.SRC_SUCCESS_ROWS,
    L.SRC_FAILED_ROWS,
    L.TARG_SUCCESS_ROWS,
    L.TARG_FAILED_ROWS,
    L.TOTAL_TRANS_ERRS,
    O.SERVER_NAME
  FROM
    "INF_RP"."OPB_TASK_INST_RUN" O,
    "INF_RP"."REP_WORKFLOWS" W,
    "INF_RP"."OPB_SUBJECT" F,
    "INF_RP"."OPB_SESSION" S,
    "INF_RP"."OPB_MAPPING" M,
    "INF_RP"."OPB_SESS_TASK_LOG" L
  WHERE 1=1
    AND F.SUBJ_ID = O.SUBJECT_ID
    AND S.SESSION_ID = O.TASK_ID
    AND M.MAPPING_ID = S.MAPPING_ID
    AND W.WORKFLOW_ID = O.WORKFLOW_ID
    AND O.WORKFLOW_RUN_ID = L.WORKFLOW_RUN_ID
    AND O.INSTANCE_ID = L.INSTANCE_ID
    AND TASK_TYPE <> 62
    AND O.WORKFLOW_RUN_ID <> 2053353892 -- some weird future-dated entry
  ORDER BY O.WORKFLOW_RUN_ID desc
) T
WHERE ROWNUM <= :limit
'''),

log_session_run_recent = (
  dict(
    folder='FOLDER_NAME',
    workflow='WORKFLOW_NAME',
    mapping='MAPPING_NAME',
    workflow_run_id='WORKFLOW_RUN_ID',
    task_id='TASK_ID',
    session='INSTANCE_NAME',
    start='START_TIME',
    end='END_TIME',
    duration='DURATION_MIN',
    error='RUN_ERR_MSG',
    src_success_rows='SRC_SUCCESS_ROWS',
    src_failed_rows='SRC_FAILED_ROWS',
    targ_success_rows='TARG_SUCCESS_ROWS',
    targ_failed_rows='TARG_FAILED_ROWS',
    total_trans_errs='TOTAL_TRANS_ERRS',
  ),
'''
SELECT
  O.WORKFLOW_RUN_ID,
  F.SUBJ_NAME as FOLDER_NAME,
  W.WORKFLOW_NAME,
  O.INSTANCE_NAME,
  M.MAPPING_NAME,
  O.TASK_ID,
  O.START_TIME,
  O.END_TIME,
  CASE
    WHEN O.END_TIME-O.START_TIME < 0 THEN ROUND((SYSDATE-7/24-O.START_TIME)*24*60,1)
    ELSE ROUND((O.END_TIME-O.START_TIME)*24*60,1)
    END as DURATION_MIN,
  O.RUN_ERR_CODE,
  O.RUN_ERR_MSG,
  L.SRC_SUCCESS_ROWS,
  L.SRC_FAILED_ROWS,
  L.TARG_SUCCESS_ROWS,
  L.TARG_FAILED_ROWS,
  L.TOTAL_TRANS_ERRS,
  O.SERVER_NAME
FROM
  "INF_RP"."OPB_TASK_INST_RUN" O,
  "INF_RP"."REP_WORKFLOWS" W,
  "INF_RP"."OPB_SUBJECT" F,
  "INF_RP"."OPB_SESSION" S,
  "INF_RP"."OPB_MAPPING" M,
  "INF_RP"."OPB_SESS_TASK_LOG" L
WHERE 1=1
  AND F.SUBJ_ID = O.SUBJECT_ID
  AND S.SESSION_ID = O.TASK_ID
  AND M.MAPPING_ID = S.MAPPING_ID
  AND W.WORKFLOW_ID = O.WORKFLOW_ID
  AND O.WORKFLOW_RUN_ID = L.WORKFLOW_RUN_ID
  AND O.INSTANCE_ID = L.INSTANCE_ID
  AND O.WORKFLOW_RUN_ID >= :last_wf_run_id
  AND TASK_TYPE <> 62
  AND O.WORKFLOW_RUN_ID <> 2053353892 -- some weird future-dated entry
ORDER BY O.WORKFLOW_RUN_ID desc
'''),

log_session_run2 = (
  dict(
    combo1='RUNCONTEXT',
    starttime='ENTRYTIME',
    folder_name='FOLDER',
    workflow_name='FOLDER',
    session_name='SESSIONPATH',
  ),
'''
SELECT
  "ABSOLUTEFILENAME", -- binary log path
  "NODENAME",
  "INTEGRATIONSERVICE",
  "REPOSITORYDOMAIN",
  "REPOSITORYNAME",
  "RUNCONTEXT",  -- folder_id, workflow_id, session_id
  "RUNID", -- workflow_run_id, ?, ?
  "ENTRYTIME", -- starttime in milli-epoch -> datetime.datetime.fromtimestamp(1473705355958/1000.0)
  "FOLDER", -- folder text
  "WORKFLOW", -- workflow text
  "SESSIONPATH", -- session text
  "OSUSER",
  "RUNINSTANCENAME"
FROM
  "INF_DD"."ISP_RUN_LOG"
WHERE 1=1
AND ROWNUM <= :limit
ORDER BY ENTRYTIME desc
'''),

list_session_conns = (
  dict(
    workflow_id='WORKFLOW_ID',
    session_id='SESSION_ID',
    transf_id='WIDGET_INSTANCE_ID',
    instance_name='INSTANCE_NAME',
    connection_type='READER_WRITER_TYPE',
    connection_name='CONN_NAME',
  ),
'''
SELECT
  "WIDGET_INSTANCE_ID", -- transf_id
  "WIDGET_TYPE",
  "INSTANCE_NAME", -- instance_name
  "READER_WRITER_TYPE",
  -- "CNX_NAME",  -- connection_name
  CASE
    WHEN CNX_NAME = '$Source' THEN  ATTR_VALUE
    WHEN CNX_NAME = '$Target' THEN  ATTR_VALUE
    ELSE CNX_NAME
  END "CONN_NAME",
  "SESSION_ID",
  "SESS_WIDG_INST_ID",
  "SESS_EXTN_OBJECT_TYPE",
  "SESS_EXTN_OBJECT_SUBTYPE",
  "SESS_CNX_REFS_OBJECT_TYPE",
  "SESS_CNX_REFS_OBJECT_SUBTYPE",
  "SESS_CNX_REFS_OBJECT_ID",
  REP_SESS_WIDGET_CNXS."WORKFLOW_ID", -- workflow_id
  "SESSION_INSTANCE_ID",
  "SESSION_VERSION_NUMBER"
FROM
  "INF_RP"."REP_SESS_WIDGET_CNXS"
LEFT JOIN "INF_RP"."REP_TASK_ATTR" ON
  REP_TASK_ATTR.ATTR_NAME LIKE  REP_SESS_WIDGET_CNXS.CNX_NAME || '%'
  AND REP_SESS_WIDGET_CNXS.SESSION_ID = REP_TASK_ATTR.TASK_ID
  AND READER_WRITER_TYPE like '%Relational%'
WHERE 1=1
AND SESSION_ID IN {session_id}
'''),

log_workflow_run = (
  dict(
    workflow_id='WORKFLOW_ID',
    workflow_name='WORKFLOW_NAME',
    workflow_run_id='WORKFLOW_RUN_ID',
    folder_id='SUBJECT_ID',
    start_time='START_TIME',
    end_time='END_TIME',
    log_file='LOG_FILE',
    error_message='RUN_ERR_MSG',
  ),
'''
SELECT
  "SUBJECT_ID",
  "WORKFLOW_ID",
  "WORKFLOW_RUN_ID",
  "WORKFLOW_NAME",
  "SERVER_ID",
  "SERVER_NAME",
  "START_TIME",
  "END_TIME",
  "LOG_FILE",
  "RUN_ERR_CODE",
  "RUN_ERR_MSG",
  "RUN_STATUS_CODE",
  "USER_NAME",
  "RUN_TYPE",
  "CODEPAGE_ID",
  "VERSION_NUMBER",
  "SERVER_NET_ID",
  "SERVER_NET_NAME",
  "HAS_FAILED_TASKS",
  "HAS_INTERRUPTS",
  "SERVER_NODE_ID",
  "SERVER_NODE_NAME",
  "OS_USER",
  "RUNINST_NAME"
FROM
  "INF_RP"."OPB_WFLOW_RUN"
WHERE 1=1
  AND WORKFLOW_RUN_ID <> 2053353892 -- some weird future-dated entry
  AND SUBJECT_ID = :folder_id
  AND ROWNUM <= :limit
ORDER BY WORKFLOW_RUN_ID desc
'''),

list_mapping=(
  dict(
    folder_id='SUBJECT_ID',
    mapping_name='MAPPING_NAME',
    mapping_id='MAPPING_ID',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "SUBJECT_AREA",
  "SUBJECT_ID", -- folder_id
  "PARENT_MAPPING_NAME",
  "PARENT_MAPPING_ID",
  "PARENT_MAPPING_VERSION_NUMBER",
  "PARENT_MAPPING_VERSION_STATUS",
  "PARENT_MAPPING_UTC_CHECKIN",
  "PARENT_MAPPING_UTC_LAST_SAVED",
  "PARENT_MAPPING_LAST_SAVED",
  "PARENT_MAPPING_IS_VALID",
  "PARENT_MAPPING_DESCRIPTION",
  "MAPPING_NAME", -- mapping_name
  "MAPPING_ID", -- mapping_id
  "MAPPING_VERSION_NUMBER",
  "MAPPING_VERSION_STATUS",
  "MAPPING_UTC_CHECKIN",
  "MAPPING_UTC_LAST_SAVED", -- starttime in epoch -> datetime.datetime.fromtimestamp(1473705355958)
  "MAPPING_LAST_SAVED",
  "MAPPING_DESCRIPTION",
  "REPOSITORY_NAME",
  "IS_GLOBAL_SHORTCUT",
  "IS_SHORTCUT"
FROM
  "INF_RP"."REP_ALL_MAPPINGS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
'''),

list_mapplet=(
  dict(
    folder_id='SUBJECT_ID',
    mapplet_name='MAPPLET_NAME',
    mapplet_id='MAPPLET_ID',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "SUBJECT_AREA",
  "SUBJECT_ID", -- folder_id
  "PARENT_MAPPLET_NAME",
  "PARENT_MAPPLET_ID",
  "PARENT_MAPPLET_VERSION_NUMBER",
  "PARENT_MAPPLET_VERSION_STATUS",
  "PARENT_MAPPLET_UTC_CHECKIN",
  "PARENT_MAPPLET_UTC_LAST_SAVED",
  "PARENT_MAPPLET_LAST_SAVED",
  "PARENT_MAPPLET_IS_VALID",
  "PARENT_MAPPLET_DESCRIPTION",
  "MAPPLET_NAME", -- mapplet_name
  "MAPPLET_ID", -- mapplet_id
  "MAPPLET_VERSION_NUMBER",
  "MAPPLET_VERSION_STATUS",
  "MAPPLET_UTC_CHECKIN",
  "MAPPLET_UTC_LAST_SAVED",
  "MAPPLET_LAST_SAVED",
  "MAPPLET_DESCRIPTION",
  "REF_WIDGET_ID",
  "REPOSITORY_NAME",
  "IS_GLOBAL_SHORTCUT",
  "IS_SHORTCUT"
FROM
  "INF_RP"."REP_ALL_MAPPLETS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
'''),

list_workflow=(
  dict(
    workflow_id='WORKFLOW_ID',
    workflow_name='WORKFLOW_NAME',
    folder_id='SUBJECT_ID',
  ),'''
SELECT
  "SUBJECT_AREA",
  "WORKFLOW_NAME",
  "SCHEDULER_NAME",
  "START_TIME",
  "END_TIME",
  "IS_RUN_ON_LIMIT",
  "RUN_OPTIONS",
  "END_OPTIONS",
  "DELTA_VALUE",
  "RUN_COUNT",
  "SCHEDULER_ID",
  "SCHEDULER_IS_REUSABLE",
  "SCHEDULER_COMMENTS",
  "SCHEDULER_VERSION_NUMBER",
  "WORKFLOW_VERSION_NUMBER",
  "WORKFLOW_ID", -- workflow_id
  "WORKFLOW_IS_VALID",
  "WORKFLOW_IS_SERVICE",
  "WORKFLOW_IS_RUNNABLE_SERVICE",
  "WORKFLOW_LAST_SAVED",
  "WORKFLOW_COMMENTS",
  "SUBJECT_ID", -- folder_id
  "SERVER_NAME",
  "SERVER_ID",
  "WORKFLOW_IS_IMPACTED"
FROM
  "INF_RP"."REP_WORKFLOWS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
'''),

list_source=(
  dict(
    folder_id='SUBJECT_ID',
    source_name='SOURCE_NAME',
    source_id='SOURCE_ID',
    database_name='SOURCE_DATABASE_NAME',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "PARENT_SOURCE_NAME",
  "PARENT_SOURCE_BUSINESS_NAME",
  "PARENT_SOURCE_ID",
  "PARENT_SOURCE_DESCRIPTION",
  "PARENT_SOURCE_VERSION_NUMBER",
  "PARENT_SOURCE_VERSION_STATUS",
  "PARENT_SOURCE_UTC_CHECKIN",
  "PARENT_SOURCE_UTC_LAST_SAVED",
  "PARENT_SOURCE_LAST_SAVED",
  "PARENT_SOURCE_SCHEMA_NAME",
  "PARENT_SOURCE_FIRST_FIELD_ID",
  "PARENT_SOURCE_SELECT_INFO_ID",
  "PARENT_SOURCE_DISPLAY_SIZE",
  "PARENT_SOURCE_PHYSICAL_SIZE",
  "PARENT_SRC_MIN_PHYSICAL_SIZE",
  "PARENT_SOURCE_DATABASE_NAME",
  "PARENT_SOURCE_TYPE",
  "PARENT_SOURCE_DATABASE_TYPE",
  "SUBJECT_AREA",
  "SUBJECT_ID",  -- folder_id
  REP_ALL_SOURCES."SOURCE_NAME",  -- source_name
  "SOURCE_ID",  -- source_id
  "SOURCE_DESCRIPTION",
  "SOURCE_VERSION_NUMBER",
  "SOURCE_VERSION_STATUS",
  "SOURCE_UTC_CHECKIN",
  "SOURCE_UTC_LAST_SAVED", -- starttime in epoch -> datetime.datetime.fromtimestamp(1473705355958)
  "SOURCE_LAST_SAVED",
  "SOURCE_DATABASE_NAME", -- database_name
  "REPOSITORY_NAME",
  "IS_SHORTCUT",
  "IS_GLOBAL_SHORTCUT",
  OPB_SRC.OWNERNAME
FROM
  "INF_RP"."REP_ALL_SOURCES", "INF_RP"."OPB_SRC"
WHERE 1=1
AND REP_ALL_SOURCES.SOURCE_ID = OPB_SRC.SRC_ID
AND SUBJECT_ID = :folder_id
'''),

list_source_fields=(
  dict(
    folder_id='SUBJECT_ID',
    source_name='SOURCE_NAME',
    source_id='SOURCE_ID',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "PARENT_SOURCE_NAME",
  "PARENT_SOURCE_BUSINESS_NAME",
  "PARENT_SOURCE_ID",
  "PARENT_SOURCE_DESCRIPTION",
  "PARENT_SOURCE_VERSION_NUMBER",
  "PARENT_SOURCE_VERSION_STATUS",
  "PARENT_SOURCE_UTC_CHECKIN",
  "PARENT_SOURCE_UTC_LAST_SAVED",
  "PARENT_SOURCE_LAST_SAVED",
  "PARENT_SOURCE_TYPE",
  "PARENT_SOURCE_DATABASE_NAME",
  "PARENT_SOURCE_DATABASE_TYPE",
  "SUBJECT_AREA",
  "SUBJECT_ID",
  "SOURCE_NAME",
  "SOURCE_ID",
  "SOURCE_DESCRIPTION",
  "SOURCE_VERSION_NUMBER",
  "SOURCE_VERSION_STATUS",
  "SOURCE_UTC_CHECKIN",
  "SOURCE_UTC_LAST_SAVED",
  "SOURCE_LAST_SAVED",
  "SOURCE_DATABASE_NAME",
  "SOURCE_FIELD_NAME",
  "SOURCE_FIELD_BUSINESS_NAME",
  "SOURCE_FIELD_ID",
  "SOURCE_FIELD_DESCRIPTION",
  "SOURCE_FIELD_NUMBER",
  "SOURCE_FIELD_NEXT_FIELD_ID",
  "SOURCE_FIELD_LEVEL",
  "SOURCE_FIELD_PICTURE_TEXT",
  "SOURCE_FIELD_OCCURS_TIMES",
  "SOURCE_FIELD_REDEFINES_FIELD",
  "SOURCE_FIELD_DISPLAY_OFFSET",
  "SOURCE_FIELD_DISPLAY_LENGTH",
  "SOURCE_FIELD_PHYSICAL_OFFSET",
  "SOURCE_FIELD_PHYSICAL_LENGTH",
  "SOURCE_FIELD_CHILD_FIELD_ID",
  "SOURCE_FIELD_KEY_TYPE",
  "SOURCE_FIELD_DATATYPE",
  "SOURCE_FIELD_PRECISION",
  "SOURCE_FIELD_SCALE",
  "SOURCE_FIELD_PIC_USAGE_NAME",
  "SOURCE_FIELD_NULLTYPE",
  "REPOSITORY_NAME",
  "IS_SHORTCUT",
  "IS_GLOBAL_SHORTCUT"
FROM
  "INF_RP"."REP_ALL_SOURCE_FLDS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
AND SOURCE_ID = :source_id
'''),

list_target_fields=(
  dict(
    folder_id='SUBJECT_ID',
    target_name='TARGET_NAME',
    target_id='TARGET_ID',
    last_saved='TARGET_UTC_LAST_SAVED',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "PARENT_TARGET_NAME",
  "PARENT_TARGET_BUSINESS_NAME",
  "PARENT_TARGET_ID",
  "PARENT_TARGET_DESCRIPTION",
  "PARENT_TARGET_VERSION_NUMBER",
  "PARENT_TARGET_VERSION_STATUS",
  "PARENT_TARGET_UTC_CHECKIN",
  "PARENT_TARGET_UTC_LAST_SAVED",
  "PARENT_TARGET_LAST_SAVED",
  "PARENT_TARGET_FILE_ID",
  "PARENT_TARGET_DATABASE_TYPE",
  "SUBJECT_AREA",
  "SUBJECT_ID",
  "TARGET_NAME",
  "TARGET_ID",
  "TARGET_DESCRIPTION",
  "TARGET_VERSION_NUMBER",
  "TARGET_VERSION_STATUS",
  "TARGET_UTC_CHECKIN",
  "TARGET_UTC_LAST_SAVED",
  "TARGET_LAST_SAVED",
  "TARGET_FIELD_NAME",
  "TARGET_FIELD_BUSINESS_NAME",
  "TARGET_FIELD_ID",
  "TARGET_FIELD_DESCRIPTION",
  "TARGET_FIELD_NUMBER",
  "TARGET_FIELD_NEXT_FIELD_ID",
  "TARGET_FIELD_PICTURE_TEXT",
  "TARGET_FIELD_IS_NULLABLE",
  "TARGET_FIELD_SOURCE_FIELD_ID",
  "TARGET_FIELD_KEY_TYPE",
  "TARGET_FIELD_DATATYPE",
  "TARGET_FIELD_DATATYPE_GROUP",
  "TARGET_FIELD_PRECISION",
  "TARGET_FIELD_SCALE",
  "REPOSITORY_NAME",
  "IS_SHORTCUT",
  "IS_GLOBAL_SHORTCUT"
FROM
  "INF_RP"."REP_ALL_TARGET_FLDS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
AND TARGET_ID = :target_id
'''),

list_target=(
  dict(
    folder_id='SUBJECT_ID',
    target_name='TARGET_NAME',
    target_id='TARGET_ID',
    last_saved='TARGET_UTC_LAST_SAVED',
  ),
'''
SELECT
  "PARENT_SUBJECT_AREA",
  "PARENT_SUBJECT_ID",
  "PARENT_TARGET_NAME",
  "PARENT_TARGET_BUSINESS_NAME",
  "PARENT_TARGET_ID",
  "PARENT_TARGET_DESCRIPTION",
  "PARENT_TARGET_VERSION_NUMBER",
  "PARENT_TARGET_VERSION_STATUS",
  "PARENT_TARGET_UTC_CHECKIN",
  "PARENT_TARGET_UTC_LAST_SAVED",
  "PARENT_TARGET_LAST_SAVED",
  "PARENT_TARGET_FIRST_FIELD_ID",
  "PARENT_TARGET_CONSTRAINT",
  "PARENT_TARGET_CREATE_OPTIONS",
  "PARENT_TARGET_FIRST_INDEX_ID",
  "PARENT_TARGET_FILE_ID",
  "PARENT_TARGET_DATABASE_TYPE",
  "SUBJECT_AREA",
  "SUBJECT_ID", -- folder_id
  "TARGET_NAME", -- target_name
  "TARGET_ID", -- target_id
  "TARGET_DESCRIPTION",
  "TARGET_VERSION_NUMBER",
  "TARGET_VERSION_STATUS",
  "TARGET_UTC_CHECKIN",
  "TARGET_UTC_LAST_SAVED", -- last_saved in epoch -> datetime.datetime.fromtimestamp(1473705355958)
  "TARGET_LAST_SAVED",
  "REPOSITORY_NAME",
  "IS_SHORTCUT",
  "IS_GLOBAL_SHORTCUT"
FROM
  "INF_RP"."REP_ALL_TARGETS"
WHERE 1=1
AND SUBJECT_ID = :folder_id
'''),

list_transformation=(
  dict(
    transf_name='WIDGET_NAME',
    transf_id='WIDGET_ID',
    trans_type='WIDGET_TYPE',
    folder_id='SUBJECT_ID',
  ),
'''
SELECT
  "WIDGET_NAME",  -- transf_name
  "WIDGET_ID", -- transf_id
  "WIDGET_TYPE", -- trans_type
  "IS_REUSABLE",
  "SUBJECT_ID", -- folder_id
  "VERSION_ID",
  "COMMENTS",
  "WIDGET_PROP",
  "LAST_SAVED",
  "CREATE_INFO",
  "OBJVERSION",
  "VERSION_NUMBER",
  "VERSION_STATUS",
  "UTC_LAST_SAVED",
  "IS_VISIBLE",
  "CHECKOUT_USER_ID",
  "IS_MARKED",
  "UTC_REF_TIME",
  "UTC_CHECKIN",
  "TEMPLATE_ID",
  "RU_PARENT_ID",
  "RU_VERSION_NUMBER",
  "OBJ_CMP",
  "FILE_ID",
  "COMP_VERSION"
FROM
  "INF_RP"."OPB_WIDGET"
WHERE 1=1
AND SUBJECT_ID = :folder_id
'''),

list_instance=(
  dict(
    instance_name='INSTANCE_NAME',
    instance_id='INSTANCE_ID',
    mapping_id='MAPPING_ID',
    transf_id='WIDGET_ID',
    trans_type='WIDGET_TYPE',
  ),
'''
SELECT
  "MAPPING_ID", -- mapping_id
  "WIDGET_ID", -- transf_id
  "WIDGET_TYPE", -- trans_type
  "INSTANCE_ID", -- instance_id
  "INSTANCE_NAME", -- instance_name
  "COMMENTS",
  "WIDGET_PROP",
  "VERSION_NUMBER",
  "REF_VERSION_NUMBER"
FROM
  "INF_RP"."OPB_WIDGET_INST"
WHERE 1=1
AND MAPPING_ID = :mapping_id
'''),

list_session=(
  dict(
    session_name='TASK_NAME',
    session_id='TASK_ID',
    mapping_id='MAPPING_ID',
  ),
'''
SELECT
  "SUBJECT_AREA",
  "SUBJECT_ID",
  "TASK_NAME", -- session_name
  "TASK_ID", -- session_id
  "MAPPING_ID", -- mapping_id
  "IS_VALID",
  "LAST_SAVED",
  "DESCRIPTION",
  "IS_ENABLED",
  "UTC_CHECKIN",
  "UTC_LAST_SAVED",
  "IS_REUSABLE",
  "TASK_TYPE",
  "TASK_TYPE_NAME"
FROM
  "INF_RP"."REP_ALL_TASKS",
  "INF_RP"."OPB_SESSION"
WHERE TASK_TYPE = 68
AND OPB_SESSION.SESSION_ID = REP_ALL_TASKS.TASK_ID
AND SUBJECT_ID = :folder_id
'''),

list_folder=(
  dict(
    folder_name='SUBJ_NAME',
    folder_id='SUBJ_ID',
  ),
'''
SELECT
  "SUBJ_NAME",
  "SUBJ_ID",
  "INUSE",
  "SUBJ_CREATOR",
  "SUBJ_DESC",
  "SRCTYPE",
  "IS_SHARED",
  "OWNER_ID",
  "GROUP_ID",
  "PERMISSIONS",
  "CREATION_TIME",
  "FOLDER_ATTR",
  "SUBJ_GID",
  "CREATE_INFO",
  "OBJVERSION",
  "VERSION_STATUS",
  "OS_USER"
FROM
  "INF_RP"."OPB_SUBJECT"
'''),

list_workflow_sessions=(
  dict(
    workflow_id='WORKFLOW_ID',
    session_id='TASK_ID',
    folder_id='SUBJECT_ID',
    session_name='INSTANCE_NAME',
  ),
'''
SELECT
  SUBJECT_ID,
  OPB_TASK_INST."WORKFLOW_ID",
  "INSTANCE_ID",
  "TASK_ID",
  "TASK_TYPE",
  "INSTANCE_NAME",
  "TASK_PROPERTY",
  "IS_ENABLED",
  "BIT_OPTIONS",
  "COMMENTS",
  "IS_VALID",
  "OPB_OBJECT_ID",
  "VERSION_NUMBER",
  "REF_VERSION_NUMBER",
  OPB_TASK_INST."SERVER_ID"
FROM
  "INF_RP"."REP_WORKFLOWS", "INF_RP"."OPB_TASK_INST"
WHERE 1=1
AND REP_WORKFLOWS.WORKFLOW_ID = OPB_TASK_INST.WORKFLOW_ID
AND TASK_TYPE = 68
AND SUBJECT_ID = :folder_id
'''),

list_tranformation_fields=(
  dict(),
'''

WITH
SUBJECT AS(
  SELECT
  SUBJ_NAME,
  SUBJ_ID
  FROM OPB_SUBJECT
  -- WHERE SUBJ_NAME = :folder_name
  WHERE SUBJ_ID = :folder_id
)
SELECT
  WIDGET_TYPE_NAME as TYPE,
  REP_ALL_TRANSFORMS.WIDGET_ID,
  SUBJECT_AREA as FOLDER,
  OPB_MAPPING.MAPPING_NAME,
  WIDGET_NAME,
  REP_WIDGET_FIELD.FIELD_NAME,
  REP_WIDGET_FIELD.FIELD_ORDER,
  REP_WIDGET_FIELD.WGT_PREC as PRECISION,
  REP_WIDGET_FIELD.WGT_SCALE as SCALE,
  REP_WIDGET_FIELD.DATATYPE_NUM,
  REP_WIDGET_FIELD.DATATYPE,
  REP_WIDGET_FIELD.EXPRESSION,
  OPB_MAPPING.MAPPING_NAME || '.' || WIDGET_NAME || '.' || REP_WIDGET_FIELD.FIELD_NAME as COMBO2,
  SESSION_ID,
  OPB_MAPPING.MAPPING_ID,
  WIDGET_TYPE_ID,
  INSTANCE_ID,
  REP_WIDGET_FIELD.WIDGET_ID || '-' || REP_WIDGET_FIELD.FIELD_ID as WIDGET_FIELD_ID
FROM
  INF_RP.OPB_SWIDGET_INST
  JOIN OPB_MAPPING on OPB_MAPPING.MAPPING_ID = OPB_SWIDGET_INST.MAPPING_ID
JOIN REP_ALL_TRANSFORMS on REP_ALL_TRANSFORMS.WIDGET_ID = OPB_SWIDGET_INST.WIDGET_ID AND OPB_SWIDGET_INST.INSTANCE_NAME = REP_ALL_TRANSFORMS.WIDGET_NAME
JOIN REP_WIDGET_FIELD on REP_WIDGET_FIELD.WIDGET_ID = OPB_SWIDGET_INST.WIDGET_ID

WHERE 1=1
AND REP_ALL_TRANSFORMS.SUBJECT_ID in (SELECT SUBJ_ID FROM SUBJECT)

ORDER BY OPB_MAPPING.MAPPING_ID, REP_ALL_TRANSFORMS.WIDGET_ID, REP_WIDGET_FIELD.FIELD_ORDER
'''),

list_source_target_fields=(
  dict(),
'''
WITH
SUBJECT AS(
  SELECT
  SUBJ_NAME,
  SUBJ_ID
  FROM OPB_SUBJECT
  -- WHERE SUBJ_NAME = :folder_name
  WHERE SUBJ_ID = :folder_id
),
SESSIONS AS (
SELECT
  SUBJECT_ID
  ,TASK_ID
FROM OPB_TASK
WHERE 1=1
AND TASK_TYPE = 68
AND SUBJECT_ID in (SELECT SUBJ_ID from SUBJECT)
),
SESSION_INSTANCE as (
SELECT
  OPB_SUBJECT.SUBJ_NAME AS FOLDER,
  REP_WORKFLOWS.WORKFLOW_NAME,
  OPB_TASK_INST.INSTANCE_NAME AS SESSION_NAME,
  OPB_MAPPING.MAPPING_NAME,
  OPB_TASK_INST.WORKFLOW_ID,
  OPB_TASK_INST.INSTANCE_ID as SESSION_INST_ID,
  OPB_SESSION.SESSION_ID,
  OPB_MAPPING.MAPPING_ID,
  OPB_TASK_INST.TASK_ID
  
FROM
  INF_RP.OPB_TASK_INST
JOIN  INF_RP.OPB_SESSION ON  (INF_RP.OPB_TASK_INST.TASK_ID = INF_RP.OPB_SESSION.SESSION_ID)
JOIN  INF_RP.REP_WORKFLOWS ON  (INF_RP.OPB_TASK_INST.WORKFLOW_ID = REP_WORKFLOWS.WORKFLOW_ID)
JOIN  INF_RP.OPB_MAPPING ON  (INF_RP.OPB_SESSION.MAPPING_ID = INF_RP.OPB_MAPPING.MAPPING_ID)
JOIN  INF_RP.OPB_SUBJECT ON  (REP_WORKFLOWS.SUBJECT_ID = INF_RP.OPB_SUBJECT.SUBJ_ID)
WHERE 1=1
AND OPB_SESSION.SESSION_ID in (select TASK_ID FROM SESSIONS)
),


WIDGET_INST AS (
  SELECT
    MAPPING_ID,
    WIDGET_ID,
    INSTANCE_ID,
    SESS_WIDG_INST_ID,
    INSTANCE_NAME
    
  FROM OPB_SWIDGET_INST
  WHERE 1=1
  AND MAPPING_ID in ( select MAPPING_ID from SESSION_INSTANCE)
),

 T1 as (
 SELECT
  'SOURCE' as TYPE,
  SOURCE_ID as WIDGET_ID,
  SUBJECT_AREA  as FOLDER,
  OWNERNAME as OWNER_NAME,
  REP_ALL_SOURCE_FLDS.SOURCE_NAME as TABLE_NAME,
  SOURCE_FIELD_NAME as FIELD_NAME,
  SOURCE_FIELD_NUMBER as FIELD_NUMBER,
  SOURCE_FIELD_KEY_TYPE as FIELD_KEY_TYPE,
  SOURCE_FIELD_DATATYPE as FIELD_DATATYPE,
  SOURCE_FIELD_PRECISION as FIELD_PRECISION,
  SOURCE_FIELD_SCALE as FIELD_SCALE,
  SOURCE_FIELD_NULLTYPE as FIELD_NULLTYPE,
  OWNERNAME || '.' || REP_ALL_SOURCE_FLDS.SOURCE_NAME as COMBO0,
  REP_ALL_SOURCE_FLDS.SOURCE_NAME || '.' || SOURCE_FIELD_NAME as COMBO1,
  OWNERNAME || '.' || REP_ALL_SOURCE_FLDS.SOURCE_NAME || '.' || SOURCE_FIELD_NAME as COMBO2,
  SOURCE_FIELD_ID as FIELD_ID
FROM
  REP_ALL_SOURCE_FLDS
  JOIN OPB_SRC on OPB_SRC.SRC_ID = REP_ALL_SOURCE_FLDS.SOURCE_ID
WHERE
  SOURCE_ID in (select WIDGET_ID from WIDGET_INST)
  AND SUBJECT_AREA in (SELECT SUBJ_NAME FROM SUBJECT)

  UNION ALL
SELECT
  'TARGET' as TYPE,
  TARGET_ID as WIDGET_ID,
  SUBJECT_AREA as FOLDER,
  NULL as TARGET_DATABASE_NAME,
  TARGET_NAME,
  TARGET_FIELD_NAME,
  TARGET_FIELD_NUMBER,
  TARGET_FIELD_KEY_TYPE,
  TARGET_FIELD_DATATYPE,
  TARGET_FIELD_PRECISION,
  TARGET_FIELD_SCALE,
  TARGET_FIELD_IS_NULLABLE,
  TARGET_NAME as COMBO0,
  TARGET_NAME || '.' || TARGET_FIELD_NAME as COMBO1,
  NULL || '.' || TARGET_NAME || '.' || TARGET_FIELD_NAME as COMBO2,
  TARGET_FIELD_ID
FROM
  REP_ALL_TARGET_FLDS
WHERE
  TARGET_ID in (select WIDGET_ID from WIDGET_INST)
  AND SUBJECT_AREA in (SELECT SUBJ_NAME FROM SUBJECT)
)

SELECT * from T1
ORDER BY FOLDER, TYPE, OWNER_NAME, TABLE_NAME,FIELD_NUMBER

'''),

list_workflow_details=(
  dict(),
'''
WITH
SUBJECT AS(
  SELECT
  SUBJ_NAME,
  SUBJ_ID
  FROM OPB_SUBJECT
  -- WHERE SUBJ_NAME = :folder_name
  WHERE SUBJ_ID = :folder_id
),

SESSIONS AS (
SELECT
  SUBJECT_ID
  ,TASK_ID
FROM OPB_TASK
WHERE 1=1
AND TASK_TYPE = 68
AND SUBJECT_ID in (SELECT SUBJ_ID from SUBJECT)
--AND TASK_ID = 18001
),


SESSION_INSTANCE as (
SELECT
  OPB_SUBJECT.SUBJ_NAME AS FOLDER,
  REP_WORKFLOWS.WORKFLOW_NAME,
  OPB_TASK_INST.INSTANCE_NAME AS SESSION_NAME,
  OPB_MAPPING.MAPPING_NAME,
  OPB_TASK_INST.WORKFLOW_ID,
  OPB_TASK_INST.INSTANCE_ID as SESSION_INST_ID,
  OPB_SESSION.SESSION_ID,
  OPB_MAPPING.MAPPING_ID,
  OPB_TASK_INST.TASK_ID
  
FROM
  INF_RP.OPB_TASK_INST
JOIN  INF_RP.OPB_SESSION ON  (INF_RP.OPB_TASK_INST.TASK_ID = INF_RP.OPB_SESSION.SESSION_ID)
JOIN  INF_RP.REP_WORKFLOWS ON  (INF_RP.OPB_TASK_INST.WORKFLOW_ID = REP_WORKFLOWS.WORKFLOW_ID)
JOIN  INF_RP.OPB_MAPPING ON  (INF_RP.OPB_SESSION.MAPPING_ID = INF_RP.OPB_MAPPING.MAPPING_ID)
JOIN  INF_RP.OPB_SUBJECT ON  (REP_WORKFLOWS.SUBJECT_ID = INF_RP.OPB_SUBJECT.SUBJ_ID)
WHERE 1=1
AND OPB_SESSION.SESSION_ID in (select TASK_ID FROM SESSIONS)
)
--select * from SESSION_INSTANCE
,


WIDGET_INST AS (
  SELECT
    MAPPING_ID,
    WIDGET_ID,
    WIDGET_TYPE,
    CASE WIDGET_TYPE
    WHEN 1 THEN 'SOURCE'
    WHEN 2 THEN 'TARGET'
    WHEN 3 THEN 'SOURCE_QUAL'
    WHEN 4 THEN 'UPDATE_STR'
    WHEN 5 THEN 'EXPRESSION'
    WHEN 6 THEN 'PROCEDURE'
    WHEN 7 THEN 'SEQUENCE'
    WHEN 9 THEN 'AGGREGATE'
    WHEN 10 THEN 'FILTER'
    WHEN 11 THEN 'LOOKUP'
    WHEN 14 THEN 'NORMALIZE'
    WHEN 15 THEN 'ROUTER'
    WHEN 80 THEN 'SORT'
    WHEN 97 THEN 'UNION'
    ELSE '??' END as WIDGET_TYPE_,
    INSTANCE_ID,
    SESS_WIDG_INST_ID,
    INSTANCE_NAME
    
  FROM OPB_SWIDGET_INST
  WHERE 1=1
  AND MAPPING_ID in ( select MAPPING_ID from SESSION_INSTANCE)
)
--select * from WIDGET_INST
,

--SESSION_CNX as (
--SELECT
--OPB_SESSION.SESSION_ID,
--REP_SESS_WIDGET_CNXS.INSTANCE_NAME,
--REP_SESS_WIDGET_CNXS.READER_WRITER_TYPE,
--REP_SESS_WIDGET_CNXS.CNX_NAME
--FROM OPB_SESSION
--JOIN WIDGET_INST on WIDGET_INST.MAPPING_ID = OPB_SESSION.MAPPING_ID
--JOIN REP_SESS_WIDGET_CNXS on REP_SESS_WIDGET_CNXS.SESSION_ID = OPB_SESSION.SESSION_ID
--  AND WIDGET_INST.INSTANCE_ID = REP_SESS_WIDGET_CNXS.WIDGET_INSTANCE_ID
--WHERE 1=1
--),


TGT_ as  (
 SELECT
    OPB_TARG.TARGET_ID,
    OPB_SWIDGET_ATTR.SESSION_ID,
    WIDGET_INST.MAPPING_ID,
--    OPB_TARG.SUBJ_ID,
    OPB_SWIDGET_ATTR.ATTR_VALUE as OWNERNAME,
    OPB_TARG.TARGET_NAME
--    WIDGET_INST.INSTANCE_ID
  FROM OPB_TARG
  JOIN WIDGET_INST on WIDGET_INST.WIDGET_TYPE = 2
    AND OPB_TARG.TARGET_ID = WIDGET_INST.WIDGET_ID
  JOIN SESSION_INSTANCE on SESSION_INSTANCE.MAPPING_ID = WIDGET_INST.MAPPING_ID
  LEFT JOIN OPB_SWIDGET_ATTR on
  OPB_SWIDGET_ATTR.SESSION_ID = SESSION_INSTANCE.SESSION_ID AND
  OPB_SWIDGET_ATTR.SESS_WIDG_INST_ID = WIDGET_INST.SESS_WIDG_INST_ID AND
  OPB_SWIDGET_ATTR.ATTR_ID = 3

  GROUP BY
  OPB_TARG.TARGET_ID,
  OPB_SWIDGET_ATTR.SESSION_ID,
  WIDGET_INST.MAPPING_ID,
  OPB_SWIDGET_ATTR.ATTR_VALUE,
  OPB_TARG.TARGET_NAME
--  WIDGET_INST.INSTANCE_ID
)
--select * from TGT_
,


SRC_ as  (

SELECT
OPB_DBDS.MAPPING_ID,
OPB_DBD.DBDNAM,
OPB_SRC.SRC_ID as SOURCE_ID,
OPB_SRC.FILE_NAME,
OPB_SRC.SOURCE_NAME,
OPB_SRC.OWNERNAME
--WIDGET_INST.INSTANCE_ID

FROM INF_RP.OPB_DBDS
JOIN INF_RP.OPB_DBD on OPB_DBD.DBDID = OPB_DBDS.DBD_ID
JOIN WIDGET_INST on   WIDGET_INST.WIDGET_TYPE = 1 AND OPB_DBDS.MAPPING_ID = WIDGET_INST.MAPPING_ID
JOIN SESSION_INSTANCE on SESSION_INSTANCE.MAPPING_ID = WIDGET_INST.MAPPING_ID
JOIN INF_RP.OPB_SRC on OPB_DBD.ROOTID = OPB_SRC.SRC_ID AND OPB_SRC.SRC_ID = WIDGET_INST.WIDGET_ID
--JOIN INF_RP.REP_SESS_WIDGET_CNXS on REP_SESS_WIDGET_CNXS.SESSION_ID = SESSION_INSTANCE.SESSION_ID AND REP_SESS_WIDGET_CNXS.WIDGET_INSTANCE_ID = WIDGET_INST.INSTANCE_ID

WHERE 1=1
--AND OPB_DBDS.MAPPING_ID=5456
group by
OPB_DBDS.MAPPING_ID,
OPB_DBD.DBDNAM,
OPB_SRC.SRC_ID,
OPB_SRC.FILE_NAME,
OPB_SRC.SOURCE_NAME,
OPB_SRC.OWNERNAME
--WIDGET_INST.INSTANCE_ID

)
--select * from SRC_
,


CONNECTIONS as (
SELECT
  OBJECT_ID,
  OBJECT_NAME,
  USER_NAME,
  CONNECT_STRING
FROM OPB_CNX
ORDER BY OBJECT_NAME
),

READER_WRITER_TYPE_ AS (
  SELECT 'File Writer' as TYPE_, 'F_W:' TYPE_ABBR from DUAL UNION ALL
  SELECT 'Relational Reader' as TYPE_, 'R_R:' TYPE_ABBR from DUAL UNION ALL
  SELECT 'Relational Writer' as TYPE_, 'R_W:' TYPE_ABBR from DUAL UNION ALL
  SELECT 'File Reader'as TYPE_, 'F_R:' TYPE_ABBR  from DUAL
),


SRC_TGT_CONN as (

SELECT
  SESSION_ID,
  LISTAGG(CASE
    WHEN READER_WRITER_TYPE like '%Reader%' AND CNX_NAME = '$Source' THEN  TYPE_ABBR || ATTR_VALUE
    WHEN READER_WRITER_TYPE like '%Reader%' AND CNX_NAME = '$Target' THEN  TYPE_ABBR || ATTR_VALUE
    WHEN READER_WRITER_TYPE like '%File%Reader%' THEN  TYPE_ABBR || CNX_NAME
    WHEN READER_WRITER_TYPE like '%Reader%' THEN  TYPE_ABBR || CNX_NAME
    ELSE NULL
  END, ' | ') WITHIN GROUP (ORDER BY INSTANCE_NAME) "SOURCE_CONN",
  LISTAGG(CASE
    WHEN READER_WRITER_TYPE like '%Writer%' AND CNX_NAME = '$Source' THEN  TYPE_ABBR || ATTR_VALUE
    WHEN READER_WRITER_TYPE like '%Writer%' AND CNX_NAME = '$Target' THEN  TYPE_ABBR || ATTR_VALUE
    WHEN READER_WRITER_TYPE like '%Writer%' THEN  TYPE_ABBR || CNX_NAME
    ELSE NULL
  END, ' | ') WITHIN GROUP (ORDER BY INSTANCE_NAME) "TARGET_CONN",
  count(1)
FROM
  "INF_RP"."REP_SESS_WIDGET_CNXS"
LEFT JOIN "INF_RP"."REP_TASK_ATTR" ON
  REP_TASK_ATTR.ATTR_NAME LIKE  REP_SESS_WIDGET_CNXS.CNX_NAME || '%'
  AND REP_SESS_WIDGET_CNXS.SESSION_ID = REP_TASK_ATTR.TASK_ID
  AND (READER_WRITER_TYPE like '%Relational%' AND NOT REP_SESS_WIDGET_CNXS.CNX_NAME IS NULL)
  AND REP_TASK_ATTR.INSTANCE_ID in (
      SELECT CASE
      WHEN EXISTS
      (
        SELECT
        INSTANCE_ID
        from REP_TASK_ATTR
        WHERE 1=1
        AND REP_TASK_ATTR.INSTANCE_ID in (select SESSION_INST_ID from SESSION_INSTANCE)
        AND REP_TASK_ATTR.ATTR_NAME like '$%conn%'
      ) THEN (select SESSION_INST_ID from SESSION_INSTANCE WHERE SESSION_INST_ID = REP_TASK_ATTR.INSTANCE_ID)
      else 0 end as INSTANCE_ID_
      from dual)
JOIN READER_WRITER_TYPE_ on   READER_WRITER_TYPE=TYPE_
WHERE 1=1
AND SESSION_ID in (select TASK_ID FROM SESSIONS)
group by SESSION_ID

)
--SELECT * from SRC_TGT_CONN

SELECT
  SESSION_INSTANCE.FOLDER,
  SESSION_INSTANCE.WORKFLOW_NAME,
  SESSION_INSTANCE.SESSION_NAME,
  SESSION_INSTANCE.MAPPING_NAME,
  REPLACE(SOURCE_CONN, 'Relational:', '') as SOURCE_CONN,
  REPLACE(TARGET_CONN, 'Relational:', '') as TARGET_CONN,
  CASE
  WHEN SRC_.OWNERNAME IS NULL THEN SRC_.SOURCE_NAME
  ELSE SRC_.OWNERNAME || '.' || SRC_.SOURCE_NAME END as SOURCE_TABLE,
  CASE
  WHEN TGT_.OWNERNAME IS NULL THEN TGT_.TARGET_NAME
  ELSE TGT_.OWNERNAME || '.' || TGT_.TARGET_NAME END as TARGET_TABLE,
  SESSION_INSTANCE.WORKFLOW_ID,
  SESSION_INSTANCE.SESSION_INST_ID,
  SESSION_INSTANCE.SESSION_ID,
  SESSION_INSTANCE.MAPPING_ID,
  SRC_.SOURCE_ID,
  TGT_.TARGET_ID
  
FROM
  SESSION_INSTANCE
JOIN  SRC_TGT_CONN ON SESSION_INSTANCE.TASK_ID = SRC_TGT_CONN.SESSION_ID
LEFT JOIN TGT_ ON TGT_.MAPPING_ID = SESSION_INSTANCE.MAPPING_ID
LEFT JOIN SRC_ ON SRC_.MAPPING_ID = SESSION_INSTANCE.MAPPING_ID

WHERE 1=1
ORDER BY  SESSION_INSTANCE.FOLDER, SESSION_INSTANCE.WORKFLOW_NAME, SESSION_INSTANCE.SESSION_NAME

'''),


)